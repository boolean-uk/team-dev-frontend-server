generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  role           Role          @default(STUDENT)
  profile        Profile?
  cohortId       Int?
  cohort         Cohort?       @relation(fields: [cohortId], references: [id])
  posts          Post[]
  deliveryLogs   DeliveryLog[]
  notesByTeacher Note[]        @relation("TeacherNotes")
  notes          Note[]        @relation("StudentNotes")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  postComments   PostComment[]
  postLikes      PostLike[]
  submissions    Submission[]  
  messages       Message[]
  conversations   UsersAndConversations[]
 }

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  teacher   User     @relation(name: "TeacherNotes", fields: [teacherId], references: [id])
  teacherId Int
  student   User     @relation(name: "StudentNotes", fields: [studentId], references: [id])
  studentId Int
  isEdited  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  firstName    String
  lastName     String
  bio          String?
  profileUrl   String?
  githubUrl    String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  postComments PostComment[]

}

model Cohort {
  id              Int              @id @default(autoincrement())
  users           User[]
  cohortName      String           @unique
  deliveryLogs    DeliveryLog[]
  CohortExercises CohortExercise[]
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Post {
  id           Int           @id @default(autoincrement())
  content      String
  edited       Boolean       @default(false)
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  postComments PostComment[]
  postLikes    PostLike[]
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  active    Boolean  @default(false)
}

model PostComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(150)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId Int
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DeliveryLog {
  id        Int               @id @default(autoincrement())
  date      DateTime
  userId    Int
  user      User              @relation(fields: [userId], references: [id])
  cohortId  Int
  cohort    Cohort            @relation(fields: [cohortId], references: [id])
  lines     DeliveryLogLine[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model DeliveryLogLine {
  id        Int         @id @default(autoincrement())
  content   String
  logId     Int
  log       DeliveryLog @relation(fields: [logId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Conversation {
  id        Int         @id @default(autoincrement())
  name      String
  createdBy Int
  messages  Message[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  users     UsersAndConversations[]
}

model Message {
  id                Int           @id @default(autoincrement())
  createdBy         String
  content           String
  userId            Int
  user              User          @relation(fields: [userId], references: [id])
  conversationId    Int
  conversation      Conversation  @relation(fields: [conversationId], references: [id])
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model UsersAndConversations {
userId            Int
user              User  @relation(fields: [userId], references: [id])
conversationId    Int
conversation      Conversation  @relation(fields: [conversationId], references: [id])

@@id([userId, conversationId])
}
model Course {
  id         Int      @id @default(autoincrement())
  courseName String   @unique
  modules    Module[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Module {
  id         Int      @id @default(autoincrement())
  moduleName String   @unique
  Course     Course?  @relation(fields: [courseId], references: [id])
  courseId   Int?
  units      Unit[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Unit {
  id        Int        @id @default(autoincrement())
  unitName  String     @unique
  Module    Module?    @relation(fields: [moduleId], references: [id])
  moduleId  Int?
  exercises Exercise[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Exercise {
  id              Int              @id @default(autoincrement())
  exerciseName    String           @unique
  githubUrl       String
  Unit            Unit?            @relation(fields: [unitId], references: [id])
  unitId          Int?
  cohortExercises CohortExercise[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model CohortExercise {
  id          Int          @id @default(autoincrement())
  Cohort      Cohort?      @relation(fields: [cohortId], references: [id])
  cohortId    Int?
  Exercise    Exercise?    @relation(fields: [exerciseId], references: [id])
  exerciseId  Int?
  submissions Submission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Submission {
  id               Int            @id @default(autoincrement())
  cohortExerciseId Int
  cohortExercise   CohortExercise @relation(fields: [cohortExerciseId], references: [id])
  userId           Int
  user             User           @relation(fields: [userId], references: [id])
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
}
