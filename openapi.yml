openapi: 3.0.0
info:
  title: Team Dev Frontend Server API
  version: 0.1.1
servers:
  - url: http://localhost:4040
basePath: /
schemes:
  - http
paths:
  /user:
    post:
      summary: Create a user
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        201:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    type: object
                    $ref: "#/components/schemas/User"
  /user/{id}:
    get:
      summary: Retrieve a user
      description: The user related to the id
      tags:
        - users
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    items:
                      $ref: '#/components/schemas/User'
    patch:
      summary: Update a user
      description: The updated user details are included in the response data
      tags:
        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        201:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    type: object
                    $ref: "#/components/schemas/User"
  /users:
    get:
      summary: Retrieve a list of users
      description: All users across all cohorts
      tags:
        - users
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /cohort:
    post:
      summary: Create a cohort
      tags:
        - cohorts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CohortPost"
      responses:
        201:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    type: object
                    $ref: "#/components/schemas/Cohort"
    get:
      summary: Retrieve all cohorts
      description: A list of cohorts, including start and end dates
      tags:
        - cohorts
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cohort'
  /cohort/{id}:
    get:
      summary: Retrieve a cohort
      description: The cohort related to the id
      tags:
        - cohorts
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    items:
                      $ref: '#/components/schemas/Cohort'
  /post:
    post:
      summary: Create a posting
      tags:
        - posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostPost"
      responses:
        201:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  movie:
                    type: object
                    $ref: "#/components/schemas/Post"
  /post/{id}:
    patch:
      summary: Update a post
      description: The updated post is included in the response data
      tags:
        - posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
  /posts:
    get:
      summary: Retrieve a list of posts
      description: All posts
      tags:
        - posts
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
  /courses:
    get:
      summary: Retrieve a list of courses
      description: All courses
      tags:
        - courses
      responses:
        200:
          description: OK
          content: 
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
components:
  schemas:
    User: 
      type: object
      properties:
        id: 
          type: integer
        cohortId: 
          type: integer
        role: 
          type: string
        firstName: 
          type: string
        lastName: 
          type: string
        email: 
          type: string
        biography: 
          type: string
        githubUrl: 
          type: string
        profileUrl: 
          type: string
    UserPost: 
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email: 
          type: string
        biography: 
            type: string
        github_url: 
            type: string
        password: 
            type: string
        profile_url: 
            type: string
    Cohort: 
      type: object
      properties:
        id: 
          type: integer
        cohortName: 
          type: string
        startDate: 
          type: string
        endDate: 
          type: string
        users: 
          type: array
          items:
            $ref: '#/components/schemas/User'
    CohortPost: 
      type: object
      properties:
        cohort_name: 
          type: string
        start_date: 
          type: string
        end_date: 
          type: string    
    Post: 
      type: object
      properties:
        id: 
          type: integer
        content: 
          type: string
        createdAt: 
          type: string
        postComments:
          type: string
        edited:
          type: string
        user: 
          type: object
          items:
            $ref: '#/components/schemas/User'       
        profile: 
          type: string
        postLikes:
          type: integer
    PostPost: 
      type: object
      properties:
        content: 
          type: string
        userId: 
          type: string
        createdAt: 
          type: string
    Course: 
      type: object
      properties:
        id: 
          type: integer
        courseName: 
          type: string
        user: 
          type: array
          items:
            $ref: '#/components/schemas/Module'
        createdAt: 
          type: string
    Module: 
      type: object
      properties:
        id: 
          type: integer
        moduleName: 
          type: string
        units: 
          type: array
          items:
            $ref: '#/components/schemas/Unit'
        createdAt: 
          type: string    
    Unit: 
      type: object
      properties:
        id: 
          type: integer
        unitName: 
          type: string
        createdAt: 
          type: string